public class OpportunityNotificationScheduler implements Schedulable {

    private Integer noOfdays=30;
    OpportunityNotificationScheduler(Integer noOfdays){
        this.noOfdays=noOfdays;
    }
    
    public void execute(SchedulableContext sc){
        String sql='SELECT ID, Owner.Email FROM Opportunity WHERE lastmodifieddate = LAST_N_DAYS :'+noOfdays;
        List<Opportunity> opportunityObjList = Database.query(sql);
        
        if(opportunityObjList.size()>0){
       		String subject = 'Opportunity Notification';
       	 	String body = 'Hi,<br> This notification is to notify that opportunity is not modified from last '+noOfdays+' days.';
        	Set<String> toAddresses = new Set<String>();
            
            for(Opportunity opportunityObj:opportunityObjList){
                toAddresses.add(opportunityObj.Owner.Email);
            }
        
            List<String> toAddressesList=new List<String>();
            toAddressesList.addAll(toAddresses);
        
        	sendEmail(toAddressesList,subject,body);
        }
    }
    
    private void sendEmail(List<String> toAddressesList,String subject,String body){
        if(toAddressesList!=null && toAddressesList.size()>0 && String.isNotEmpty(subject) && String.isNotEmpty(body)){
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            mail.setToAddresses(toAddressesList);
            mail.setSubject(subject);
            mail.setHtmlBody(body);
            Messaging.SendEmailResult[] results = Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
   	 	}
    }
}
